<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ZD's Blog Blog</title>
        <link>https://zhuddan.github.io/blog</link>
        <description>ZD's Blog Blog</description>
        <lastBuildDate>Mon, 09 Dec 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[学习历程]]></title>
            <link>https://zhuddan.github.io/blog/2024/12/09/process</link>
            <guid>https://zhuddan.github.io/blog/2024/12/09/process</guid>
            <pubDate>Mon, 09 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[开始]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_GVMP" id="开始">开始<a href="https://zhuddan.github.io/blog/2024/12/09/process#%E5%BC%80%E5%A7%8B" class="hash-link" aria-label="Direct link to 开始" title="Direct link to 开始">​</a></h2>
<p>前端开发是个很好玩的过程。相比后端开发，或者原生的APP的开发，前端开发往往代码保存就能看到效果，所见即所得，是十分有成就感的事。从最开始的静态页面，到使用<code>jquery</code>，<code>vue</code>，<code>react</code>...，虽然东西越来越多越来越复杂，但是获得的乐趣也是成倍增加。</p>
<h2 class="anchor anchorWithStickyNavbar_GVMP" id="原生开发">原生开发<a href="https://zhuddan.github.io/blog/2024/12/09/process#%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91" class="hash-link" aria-label="Direct link to 原生开发" title="Direct link to 原生开发">​</a></h2>
<p>开始上班的时候，在一家专门做微信公众号网页的公司，使用<code>jquery</code>做开发，后台使用的<code>php</code>。当时也学了点<code>vue</code>，勉强可以使用做页面。但是公司是不喜欢这种<code>vue</code>这种框架，跟不喜欢es6，可能是为了满足开发主管只会<code>jquery</code>方便管控，或者其他原因。话说这几个后端还是很厉害的那种，记得他们把<code>createjs</code>改了一版，内置到<code>flash</code>(我们当时使用flash做动画)的插件，UI做好动画，就可以直接发布为<code>js</code>代码，直接就可以动起来！所以基本都是<code>jquery</code>甚至原生<code>js</code>进行开发，这种情况下存在很多问题，最常见的就是变量污染，可以说完全没有任何模块化，最多就是每个js文件写个闭包，然后很多全局对象属性就直接挂载<code>window</code>上。虽然规定是这样的，但是我是很叛逆的那种，我不喜欢<code>var that = this</code>，所以就直接写箭头函数<code>()=&gt;{}</code>，我也不喜欢回调函数，就直接<code>Promise</code>，导致后面客户手机版本低不支持，我的主管天天在<code>babel</code>网站上把我的<code>es6</code>转为<code>es5</code>，说句实话确实有点过意不去。 虽然问题很多，但是这种情况下，我学到了很多原生的知识。</p>
<h2 class="anchor anchorWithStickyNavbar_GVMP" id="thispropsvalue">this.$props.value<a href="https://zhuddan.github.io/blog/2024/12/09/process#thispropsvalue" class="hash-link" aria-label="Direct link to this.$props.value" title="Direct link to this.$props.value">​</a></h2>
<p>后面到了另一家公司，开始写<code>vue</code>。那可能是我开始开发最快乐的时间，因为公司只有我和另一个前端，他也不怎么管我，我就自由发挥。自己写<code>vue</code>，写的也一般，现在还记得<code>this.value = this.$props.value</code>这种代码。其实我最开心的事情还是我不用写<code>es5</code>，不用写回调函数，还有多少接触了点电商购物的业务。</p>
<p>到后面又换了一家公司，虽然不会写<code>this.value = this.$props.value</code>这种代码，基本也是<code>vue2</code>+<code>element-ui</code>，老实说没什么难度和水平，最多接触点地图相关的，当时是<code>openlayers</code>。我现在想想，最有难度就是公司其他人在<code>vue</code>中写地图，往往一大堆代码在<code>mounted</code>里，然后我就搞了个在<code>vue</code>中使用标签的形式去开发<code>openlayers</code>：</p>
<p>js 写法</p>
<div class="language-js codeBlockContainer_hXLr theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_TyWJ"><pre tabindex="0" class="prism-code language-js codeBlock_ER0a thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KApy"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> map </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">target</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'map'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">layers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">TileLayer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">source</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OSM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">view</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">center</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">zoom</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup_H5ln"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_mMg1" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_dnMM"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Q1gK"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>vue</p>
<div class="language-html codeBlockContainer_hXLr theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_TyWJ"><pre tabindex="0" class="prism-code language-html codeBlock_ER0a thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KApy"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">ol-map</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">target</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">map</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:view</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">{center: [0, 0], zoom: 2}</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">ol-tile-layer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:source</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">source</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">ol-map</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_H5ln"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_mMg1" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_dnMM"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Q1gK"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>其实就是用了个<a href="https://vuejs.org/guide/components/provide-inject.html" target="_blank" rel="noopener noreferrer">依赖注入</a>，也许这就是最复杂的工作了，其余时间最多就是去<code>vue</code>官网学习，也许<code>vue</code>写起来没有之前水了。另外，上面的<code>vue</code>+<code>openlayers</code>其实早就有了<a href="https://vue3openlayers.netlify.app/" target="_blank" rel="noopener noreferrer">vue3openlayers</a>，可能<code>vue2</code>的版本也有，但是我的工作就好像闭门造车，自己想到的东西，基本都是自己想着去实现，也没有去<code>npm</code>找找有没有类似的包。</p>
<h2 class="anchor anchorWithStickyNavbar_GVMP" id="typescript">typescript<a href="https://zhuddan.github.io/blog/2024/12/09/process#typescript" class="hash-link" aria-label="Direct link to typescript" title="Direct link to typescript">​</a></h2>
<p>后面写 <code>element-ui</code> 的时候，需要把 <code>select</code> 和 <code>tree</code> 组合起来使用，网上有个解决方案<a href="https://yujinpan.github.io/el-select-tree/" target="_blank" rel="noopener noreferrer">el-select-tree</a>，但是我们数据很大就很大，然后<code>element-plus</code>也发布了，内置了这个组件<a href="https://element-plus.org/en-US/component/tree-select.html" target="_blank" rel="noopener noreferrer">tree-select</a>。为了使用这个组件，我换了<code>vue3</code>。</p>
<p>使用<code>vue3</code>之后，出现了很多问题。我还是谨慎使用<code>option-api</code>的方式，后面慢慢接触了setup的写法，发现了很多问题，因为<code>const id = ref(0)</code>， 我随时会传递一个对象给接口<code>/sys/user/[object Object]</code>，然后自己排查半天解决不来。后面试图使用<code>eslint</code>也无法完全避免。思前想后，后面还是决定上<code>typescript</code>。</p>
<p>开始使用<code>typescript</code>，基本只会定义了<code>ref&lt;UserInfo&gt;()</code>，后面发现个很好的<code>vue3</code>的库<a href="https://github.com/vbenjs" target="_blank" rel="noopener noreferrer">vbenjs</a>，开始照着学，照着打，最开始的看不懂，到后面写了第一个<code>函数重载</code>，可以说很开心了。</p>
<p>然而，<code>vue</code>也不是完美的，也不说他不好或者什么，最大的问题是<code>IDE</code>支持。当时叫<a href="https://volarjs.dev/" target="_blank" rel="noopener noreferrer">valor</a>的一个插件，内存占用很大，加上公司的电脑配置很一般，随时<code>IDE</code>卡死，还有很多时候，页面高亮错乱，新导入的vue文件不会识别...除此之外，有个项目是<code>uni-app+ts</code>的，导致编译很慢很卡，我不知道是什么问题，现在好像2.0版本稳定很多了。<code>valor</code>确实是个很厉害的框架，他把 <code>vue+typescript</code>的开发体验大大提高了，某种情况下，已经接近了<code>react</code>的开发体验。</p>
<p>后面想了很多，<code>valor</code>其实还把 <code>.vue</code>文件转为了<code>.ts</code>，然后打包的话再转为<code>.js</code>或者其他平台的代码。其实他原本的实现很复杂，各种语言服务，各种插件。不过我觉得有中间商赚差价，加上我的电脑的ide实在太卡，我出现想试一试<code>react</code>的冲动。</p>
<h2 class="anchor anchorWithStickyNavbar_GVMP" id="react">react<a href="https://zhuddan.github.io/blog/2024/12/09/process#react" class="hash-link" aria-label="Direct link to react" title="Direct link to react">​</a></h2>
<p><code>react</code> 确实开发体验比 <code>vue</code> 好很多(大公司的PY交易，<code>ts</code>的团队给<code>tsx</code>开了后门罢了。如果换过来，现在写的就是<code>tsv</code>，然后有个那个语言插件就叫要<code>ralor</code>)，扯远了，但是学习起来就很难受了。</p>
<hr>
<p>今天先写到这吧</p>
<hr>]]></content:encoded>
        </item>
    </channel>
</rss>