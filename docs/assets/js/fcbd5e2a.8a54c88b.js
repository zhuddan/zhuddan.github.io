"use strict";(self.webpackChunkzhuddan_github_io=self.webpackChunkzhuddan_github_io||[]).push([[3565],{9152:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"mini/echarts","title":"echarts","description":"","source":"@site/archived/mini/echarts.md","sourceDirName":"mini","slug":"/mini/echarts","permalink":"/docs/mini/echarts","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"To be Improved","permalink":"/docs/tags/to-be-improved"}],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"tags":["To be Improved"]},"sidebar":"archived","previous":{"title":"mqtt","permalink":"/docs/mini/mqtt"},"next":{"title":"\u767b\u5f55\u903b\u8f91\u5904\u7406","permalink":"/docs/mini/login"}}');var o=t(6070),s=t(2790);const r={sidebar_position:5,tags:["To be Improved"]},i="echarts",c={},p=[];function h(n){const e={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"echarts",children:"echarts"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:'title="init-echarts.ts"',children:"import type {\n  BarSeriesOption,\n  LineSeriesOption,\n  PieSeriesOption,\n  RadarSeriesOption,\n} from 'echarts/charts'\nimport type {\n  GraphicComponentOption,\n  GridComponentOption,\n  TitleComponentOption,\n  ToolboxComponentOption,\n  TooltipComponentOption,\n} from 'echarts/components'\n\nimport { BarChart, LineChart, PieChart, RadarChart } from 'echarts/charts'\nimport {\n  GraphicComponent,\n  GridComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components'\nimport * as echarts from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\n\necharts.use([\n  GridComponent,\n  BarChart,\n  CanvasRenderer,\n  TooltipComponent,\n  PieChart,\n  LegendComponent,\n  TitleComponent,\n  RadarChart,\n  GraphicComponent,\n  LineChart,\n])\n\nexport type CustomEChartsOption = echarts.ComposeOption<\n  | TitleComponentOption\n  | ToolboxComponentOption\n  | TooltipComponentOption\n  | GridComponentOption\n  | LineSeriesOption\n  | BarSeriesOption\n  | PieSeriesOption\n  | RadarSeriesOption\n> |\necharts.ComposeOption<GraphicComponentOption>\n\nexport { echarts }\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:'title="wx-canvas.ts"',children:"import type { EChartsType } from 'echarts/core'\n\nexport default class WxCanvas {\n  ctx: UniApp.CanvasContext\n  canvasId: string\n  chart: EChartsType | null\n  isNew: boolean\n  canvasNode?: HTMLCanvasElement\n  event: Record<string, any> = {}\n  constructor(ctx: UniApp.CanvasContext, canvasId: string, isNew: boolean, canvasNode?: HTMLCanvasElement) {\n    this.ctx = ctx\n    this.canvasId = canvasId\n    this.chart = null\n    this.isNew = isNew\n    if (isNew) {\n      this.canvasNode = canvasNode\n    }\n    else {\n      this._initStyle(ctx)\n    }\n\n    this._initEvent()\n  }\n\n  getContext(contextType: string) {\n    if (contextType === '2d') {\n      return this.ctx\n    }\n  }\n\n  setChart(chart: EChartsType) {\n    this.chart = chart\n  }\n\n  addEventListener() {\n    // noop\n  }\n\n  attachEvent() {\n    // noop\n  }\n\n  detachEvent() {\n    // noop\n  }\n\n  _initCanvas(zrender: any, ctx: any) {\n    zrender.util.getContext = function () {\n      return ctx\n    }\n\n    zrender.util.$override('measureText', (text: any, font: any) => {\n      ctx.font = font || '12px sans-serif'\n      return ctx.measureText(text)\n    })\n  }\n\n  _initStyle(ctx: any) {\n    ctx.createRadialGradient = () => {\n      // eslint-disable-next-line prefer-rest-params\n      return ctx.createCircularGradient(arguments)\n    }\n  }\n\n  _initEvent() {\n    this.event = {}\n    const eventNames = [{\n      wxName: 'touchStart',\n      ecName: 'mousedown',\n    }, {\n      wxName: 'touchMove',\n      ecName: 'mousemove',\n    }, {\n      wxName: 'touchEnd',\n      ecName: 'mouseup',\n    }, {\n      wxName: 'touchEnd',\n      ecName: 'click',\n    }]\n    eventNames.forEach((name) => {\n      this.event[name.wxName] = (e: any) => {\n        const touch = e.touches[0]\n        this.chart?.getZr().handler.dispatch(name.ecName as any, {\n          zrX: name.wxName === 'tap' ? touch.clientX : touch.x,\n          zrY: name.wxName === 'tap' ? touch.clientY : touch.y,\n          preventDefault: () => {},\n          stopImmediatePropagation: () => {},\n          stopPropagation: () => {},\n        })\n      }\n    })\n  }\n\n  set width(w) {\n    if (this.canvasNode)\n      this.canvasNode.width = w\n  }\n\n  get width() {\n    if (this.canvasNode)\n      return this.canvasNode?.width\n    return 0\n  }\n\n  set height(h) {\n    if (this.canvasNode)\n      this.canvasNode.height = h\n  }\n\n  get height() {\n    if (this.canvasNode)\n      return this.canvasNode.height\n    return 0\n  }\n}\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:'title="components/ec-canvas/types.ts"',children:"import type { ComponentExposed } from 'vue-component-type-helpers'\nimport type EcCanvas from './ec-canvas.vue'\n\nexport type { CustomEChartsOption } from '@cloud/shared'\n\nexport type EcCanvasInstance = ComponentExposed<typeof EcCanvas>\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",metastring:'title="components/ec-canvas/types.ts"',children:"<script setup lang=\"ts\">\n  import type { CustomEChartsOption } from './types'\n\n  import { WxCanvas, createBooleanProp, echarts, mergeDeep } from '@cloud/shared'\n  import { onReady } from '@dcloudio/uni-app'\n  import { getCurrentInstance, nextTick, ref, watch } from 'vue'\n\n  const props = defineProps({\n    canvasId: {\n      type: String,\n      default: () => 'ec-canvas',\n    },\n    option: {\n      type: Object as PropType<CustomEChartsOption>,\n      default: () => ({}),\n    },\n    disabled: createBooleanProp(),\n  })\n\n  type TouchCanvasEvent = UniHelper.CanvasOnTouchcancelEvent\n\n  const currentInstance = getCurrentInstance()\n  let canvasNode: HTMLCanvasElement | null = null\n  let chart: echarts.EChartsType | null = null\n  const isReady = ref(false)\n\n  function getOption() {\n    const option: CustomEChartsOption = {}\n\n    const optionMerge = props.option\n\n    return mergeDeep(option, optionMerge)\n  }\n\n  function init() {\n    echarts.registerPreprocessor((option) => {\n      if (option && option.series) {\n        if (option.series instanceof Array && option.series.length > 0) {\n          option.series.forEach((series) => {\n            series.progressive = 0\n          })\n        } else if (typeof option.series === 'object') {\n          ;(option.series as { progressive: number }).progressive = 0\n        }\n      }\n    })\n    initEcharts()\n  }\n\n  async function initEcharts() {\n    // version >= 2.9.0\uff1a\u4f7f\u7528\u65b0\u7684\u65b9\u5f0f\u521d\u59cb\u5316\n    await nextTick()\n    isReady.value = true\n    const query = uni.createSelectorQuery().in(currentInstance)\n    query\n      .select(`#${props.canvasId}`)\n      .fields({ node: true, size: true } as any, () => {})\n      .exec((res) => {\n        if (chart) chart.dispose()\n        canvasNode = res[0].node as unknown as HTMLCanvasElement\n        const dpr = uni.getSystemInfoSync().pixelRatio\n        const canvasWidth = res[0].width\n        const canvasHeight = res[0].height\n        const ctx = canvasNode!.getContext('2d') as any as UniNamespace.CanvasContext\n        const canvas = new WxCanvas(ctx, props.canvasId, true, canvasNode)\n        echarts.setPlatformAPI({\n          createCanvas: () => canvas as unknown as HTMLCanvasElement,\n          loadImage: (src, onload, onerror) => {\n            if ((canvasNode as any)?.createImage) {\n              const image = (canvasNode as any).createImage()\n              image.onload = onload\n              image.onerror = onerror\n              image.src = src\n              return image\n            }\n            console.error('\u52a0\u8f7d\u56fe\u7247\u4f9d\u8d56 `Canvas.createImage()` API\uff0c\u8981\u6c42\u5c0f\u7a0b\u5e8f\u57fa\u7840\u5e93\u7248\u672c\u5728 2.7.0 \u53ca\u4ee5\u4e0a\u3002')\n            // PENDING fallback?\n          },\n        })\n        chart = echarts.init(canvas as unknown as HTMLCanvasElement, null, {\n          width: canvasWidth,\n          height: canvasHeight,\n          devicePixelRatio: dpr, // new\n        })\n        nextTick(() => {\n          chart?.setOption(getOption())\n        })\n        canvas.setChart(chart as any)\n      })\n  }\n\n  function wrapTouch(event: TouchCanvasEvent): any {\n    return {\n      ...event,\n      touches: event.touches.map((touch) => {\n        return {\n          ...touch,\n          offsetX: touch.x,\n          offsetY: touch.y,\n        }\n      }),\n    }\n  }\n\n  function touchStart(e: TouchCanvasEvent) {\n    if (props.disabled) return\n    if (chart && e.touches.length > 0) {\n      const touch = e.touches[0]\n      const handler = chart.getZr().handler\n      handler.dispatch('mousedown', {\n        zrX: touch.x,\n        zrY: touch.y,\n        preventDefault: () => {},\n        stopImmediatePropagation: () => {},\n        stopPropagation: () => {},\n      })\n      handler.dispatch('mousemove', {\n        zrX: touch.x,\n        zrY: touch.y,\n        preventDefault: () => {},\n        stopImmediatePropagation: () => {},\n        stopPropagation: () => {},\n      })\n      handler.processGesture(wrapTouch(e), 'start')\n    }\n  }\n\n  function touchMove(e: TouchCanvasEvent) {\n    if (props.disabled) return\n    if (chart && e.touches.length > 0) {\n      const touch = e.touches[0]\n      const handler = chart.getZr().handler\n      handler.dispatch('mousemove', {\n        zrX: touch.x,\n        zrY: touch.y,\n        preventDefault: () => {},\n        stopImmediatePropagation: () => {},\n        stopPropagation: () => {},\n      })\n      handler.processGesture(wrapTouch(e), 'change')\n    }\n  }\n\n  function touchEnd(e: TouchCanvasEvent) {\n    if (props.disabled) return\n    if (chart) {\n      const touch = e.changedTouches ? e.changedTouches[0] : {}\n      const handler = chart.getZr().handler\n      handler.dispatch('mouseup', {\n        zrX: touch.x,\n        zrY: touch.y,\n        preventDefault: () => {},\n        stopImmediatePropagation: () => {},\n        stopPropagation: () => {},\n      })\n      handler.dispatch('click', {\n        zrX: touch.x,\n        zrY: touch.y,\n        preventDefault: () => {},\n        stopImmediatePropagation: () => {},\n        stopPropagation: () => {},\n      })\n      handler.processGesture(wrapTouch(e), 'end')\n    }\n  }\n  watch(\n    [() => props.option, () => isReady.value],\n    () => {\n      if (isReady.value && chart) {\n        chart.setOption(getOption())\n      }\n    },\n    {\n      deep: true,\n    },\n  )\n\n  defineExpose({\n    getDataURL: () => {\n      return new Promise<string>((resolve, reject) => {\n        uni\n          .canvasToTempFilePath({\n            canvasId: 'ec-canvas',\n            canvas: canvasNode as any,\n            width: canvasNode?.width,\n            height: canvasNode?.height,\n          })\n          .then((res) => {\n            return uni.getImageInfo({\n              src: res.tempFilePath,\n            })\n          })\n          .then((res) => {\n            resolve(res.path)\n          })\n          .catch((e) => {\n            reject(e)\n            throw e\n          })\n      })\n    },\n    getEchartsInstance() {\n      return chart\n    },\n  })\n  onReady(init)\n<\/script>\n\n<template>\n  <canvas\n    :id=\"canvasId\"\n    type=\"2d\"\n    class=\"ec-canvas\"\n    :canvas-id=\"canvasId\"\n    @touchstart=\"e => !disabled ? touchStart(e) : undefined\"\n    @touchmove=\"e => !disabled ? touchMove(e) : undefined\"\n    @touchend=\"e => !disabled ? touchEnd(e) : undefined\"\n  ></canvas>\n</template>\n\n<style>\n  .ec-canvas {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n"})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(h,{...n})}):h(n)}},2790:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>i});var a=t(758);const o={},s=a.createContext(o);function r(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);