"use strict";(self.webpackChunkzhuddan_github_io=self.webpackChunkzhuddan_github_io||[]).push([[2258],{7371:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"vscode/settings","title":"vscode \u8bbe\u7f6e","description":"","source":"@site/archived/vscode/settings.md","sourceDirName":"vscode","slug":"/vscode/settings","permalink":"/docs/vscode/settings","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"archived","previous":{"title":"\u4f7f\u7528cmder\u7ec8\u7aef","permalink":"/docs/vscode/cmder"},"next":{"title":"\u5f7b\u5e95\u5378\u8f7dvscode","permalink":"/docs/vscode/uninstall"}}');var c=o(6070),r=o(2790);const s={},i="vscode \u8bbe\u7f6e",a={},l=[];function g(n){const e={code:"code",h1:"h1",header:"header",pre:"pre",...(0,r.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.header,{children:(0,c.jsx)(e.h1,{id:"vscode-\u8bbe\u7f6e",children:"vscode \u8bbe\u7f6e"})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-jsonc",children:'// cspell:disable\n{\n  // ========== Visuals ==========\n  "editor.cursorSmoothCaretAnimation": "on",\n  // "editor.guides.bracketPairs": "active",\n  // "editor.lineNumbers": "interval",\n  // "editor.renderWhitespace": "boundary",\n  "window.autoDetectColorScheme": true,\n  "window.zoomLevel": 2,\n  "workbench.editor.tabActionLocation": "right",\n  "workbench.list.smoothScrolling": true,\n  "workbench.startupEditor": "welcomePage",\n  "workbench.tree.expandMode": "singleClick",\n  "workbench.tree.indent": 10,\n  "workbench.preferredLightColorTheme": "Default Dark+",\n  // ========== Editor ==========\n  "debug.onTaskErrors": "debugAnyway",\n  "diffEditor.ignoreTrimWhitespace": false,\n  // "editor.wordSeparators": "`~!@#%^&*()=+[{]}\\\\|;:\'\\",.<>/?",\n  "editor.find.addExtraSpaceOnTop": false,\n  "editor.inlineSuggest.enabled": true,\n  // "editor.multiCursorModifier": "ctrlCmd",\n  "editor.suggestSelection": "first",\n  "editor.tabSize": 2,\n  "editor.unicodeHighlight.invisibleCharacters": false,\n  "editor.stickyScroll.enabled": true,\n  "editor.hover.sticky": true,\n  "editor.codeActionsOnSave": {\n    "source.fixAll": "never",\n    "source.fixAll.eslint": "explicit",\n    "source.organizeImports": "never"\n  },\n  "editor.wordWrapColumn": 150,\n  "editor.wordWrap": "bounded",\n  "explorer.confirmDelete": false,\n  "explorer.confirmDragAndDrop": false,\n  "files.eol": "\\n",\n  "files.insertFinalNewline": true,\n  "files.simpleDialog.enable": true,\n  "files.associations": {\n    ".env*": "dotenv"\n  },\n  // \u81ea\u52a8\u63a8\u6d4b\u7f16\u7801\u6a21\u5f0f\n  "files.autoGuessEncoding": true,\n  "git.autofetch": true,\n  "git.confirmSync": false,\n  "git.enableSmartCommit": true,\n  // "git.untrackedChanges": "separate",\n  "scm.diffDecorationsGutterWidth": 2,\n  // ========== terminal ==========\n  "terminal.integrated.cursorStyle": "line",\n  "terminal.integrated.fontWeight": "300",\n  "terminal.integrated.persistentSessionReviveProcess": "never",\n  "terminal.integrated.tabs.enabled": true,\n  "terminal.integrated.cursorBlinking": true,\n  "terminal.integrated.defaultProfile.windows": "Command Prompt",\n  "terminal.integrated.profiles.windows": {\n    "PowerShell": {\n      "source": "PowerShell",\n      "icon": "terminal-powershell"\n    },\n    "Command Prompt": {\n      "path": [\n        "${env:windir}\\\\Sysnative\\\\cmd.exe",\n        "${env:windir}\\\\System32\\\\cmd.exe"\n      ],\n      "args": [\n        "/k D:\\\\cmder\\\\vendor\\\\init.bat"\n      ],\n      "icon": "terminal-cmd"\n    },\n    "Git Bash": {\n      "source": "Git Bash"\n    },\n    "cmder": {\n      "path": "C:\\\\WINDOWS\\\\System32\\\\cmd.exe",\n      "args": [\n        "/k D:\\\\cmder\\\\vendor\\\\init.bat"\n      ]\n    }\n  },\n  "workbench.editor.closeOnFileDelete": true,\n  "workbench.editor.highlightModifiedTabs": true,\n  "workbench.editor.limit.enabled": true,\n  "workbench.editor.limit.perEditorGroup": true,\n  "workbench.editor.limit.value": 5,\n  "workbench.iconTheme": "vscode-icons",\n  "workbench.experimental.enableNewProfilesUI": true,\n  "search.exclude": {\n    "**/*.snap": true,\n    "**/*.svg": true,\n    "**/.git": true,\n    "**/.github": false,\n    "**/.nuxt": true,\n    "**/.output": true,\n    "**/.pnpm": true,\n    "**/.vscode": true,\n    "**/.yarn": true,\n    "**/assets": true,\n    "**/bower_components": true,\n    "**/dist/**": true,\n    "**/logs": true,\n    "**/node_modules": true,\n    "**/out/**": true,\n    "**/package-lock.json": true,\n    "**/pnpm-lock.yaml": true,\n    "**/public": true,\n    "**/temp": true,\n    "**/yarn.lock": true,\n    "**/CHANGELOG*": true,\n    "**/LICENSE*": true\n  },\n  // ==========  Global Level Config, needs to put in User Settings ==========\n  "window.dialogStyle": "custom",\n  "window.title": "${rootName}", // this make tabs more readable\n  "window.titleBarStyle": "custom",\n  "extensions.autoUpdate": false,\n  // ========== Extension configs ==========\n  "emmet.showSuggestionsAsSnippets": true,\n  "emmet.triggerExpansionOnTab": false,\n  "errorLens.enabledDiagnosticLevels": [\n    "warning",\n    "error"\n  ],\n  "errorLens.excludeBySource": [\n    "cSpell",\n    "Grammarly",\n    "eslint"\n  ],\n  // react-hooks \u9700\u8981false\n  // "eslint.quiet": false,\n  // Silent the stylistic rules in you IDE, but still auto fix them\n  // "eslint.rules.customizations": [\n  //   { "rule": "style/*", "severity": "off" },\n  //   { "rule": "format/*", "severity": "off" },\n  //   { "rule": "*-indent", "severity": "off" },\n  //   { "rule": "*-spacing", "severity": "off" },\n  //   { "rule": "*-spaces", "severity": "off" },\n  //   { "rule": "*-order", "severity": "off" },\n  //   { "rule": "*-dangle", "severity": "off" },\n  //   { "rule": "*-newline", "severity": "off" },\n  //   { "rule": "*quotes", "severity": "off" },\n  //   { "rule": "*semi", "severity": "off" }\n  // ],\n  "eslint.validate": [\n    "javascript",\n    "javascriptreact",\n    "typescript",\n    "typescriptreact",\n    "vue"\n    // "html",\n    // "markdown",\n    // "jsonc"\n    // "json",\n    // "yaml",\n    // "toml"\n  ],\n  // "github.copilot.enable": {\n  //   "*": true,\n  //   "markdown": true,\n  //   "plaintext": false,\n  // },\n  // ========== cSpell ==========\n  "cSpell.allowCompoundWords": true,\n  "cSpell.language": "en,en-US",\n  "cSpell.ignorePaths": [\n    "package.json"\n  ],\n  "css.lint.hexColorLength": "ignore",\n  "githubIssues.workingIssueFormatScm": "#${issueNumberLabel}",\n  "githubPullRequests.fileListLayout": "tree",\n  "gitlens.codeLens.authors.enabled": false,\n  "gitlens.codeLens.enabled": false,\n  "gitlens.codeLens.recentChange.enabled": false,\n  "gitlens.menus": {\n    "editor": {\n      "blame": false,\n      "clipboard": true,\n      "compare": true,\n      "history": false,\n      "remote": false\n    },\n    "editorGroup": {\n      "blame": true,\n      "compare": false\n    },\n    "editorTab": {\n      "clipboard": true,\n      "compare": true,\n      "history": true,\n      "remote": true\n    },\n    "explorer": {\n      "clipboard": true,\n      "compare": true,\n      "history": true,\n      "remote": true\n    },\n    "scm": {\n      "authors": true\n    },\n    "scmGroup": {\n      "compare": true,\n      "openClose": true,\n      "stash": true\n    },\n    "scmGroupInline": {\n      "stash": true\n    },\n    "scmItem": {\n      "clipboard": true,\n      "compare": true,\n      "history": true,\n      "remote": false,\n      "stash": true\n    }\n  },\n  // "i18n-ally.autoDetection": false,\n  // "i18n-ally.displayLanguage": "en",\n  // "i18n-ally.ignoredLocales": [],\n  // "iconify.annotations": true,\n  // "iconify.inplace": true,\n  "svg.preview.mode": "svg",\n  // I only use Prettier for manually formatting\n  "prettier.enable": false,\n  "prettier.printWidth": 200,\n  "prettier.semi": false,\n  "prettier.singleQuote": true,\n  // ========== File Nesting ==========\n  // this might not be up to date with the repo, please check yourself\n  // https://github.com/antfu/vscode-file-nesting-config\n  "explorer.fileNesting.enabled": true,\n  "explorer.fileNesting.expand": false,\n  "explorer.fileNesting.patterns": {\n    "*.asax": "$(capture).*.cs, $(capture).*.vb",\n    "*.ascx": "$(capture).*.cs, $(capture).*.vb",\n    "*.ashx": "$(capture).*.cs, $(capture).*.vb",\n    "*.aspx": "$(capture).*.cs, $(capture).*.vb",\n    "*.bloc.dart": "$(capture).event.dart, $(capture).state.dart",\n    "*.c": "$(capture).h",\n    "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx",\n    "*.cjs": "$(capture).cjs.map, $(capture).*.cjs, $(capture)_*.cjs",\n    "*.component.ts": "$(capture).component.html, $(capture).component.spec.ts, $(capture).component.css, $(capture).component.scss, $(capture).component.sass, $(capture).component.less",\n    "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx",\n    "*.cs": "$(capture).*.cs",\n    "*.cshtml": "$(capture).cshtml.cs",\n    "*.csproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",\n    "*.css": "$(capture).css.map, $(capture).*.css",\n    "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx",\n    "*.dart": "$(capture).freezed.dart, $(capture).g.dart",\n    "*.ex": "$(capture).html.eex, $(capture).html.heex, $(capture).html.leex",\n    "*.go": "$(capture)_test.go",\n    "*.java": "$(capture).class",\n    "*.js": "$(capture).js.map, $(capture).*.js, $(capture)_*.js,$(capture).d.ts*",\n    "*.jsx": "$(capture).js, $(capture).*.jsx, $(capture)_*.js, $(capture)_*.jsx",\n    "*.master": "$(capture).*.cs, $(capture).*.vb",\n    "*.mjs": "$(capture).mjs.map, $(capture).*.mjs, $(capture)_*.mjs",\n    "*.module.ts": "$(capture).resolver.ts, $(capture).controller.ts, $(capture).service.ts",\n    "*.pubxml": "$(capture).pubxml.user",\n    "*.resx": "$(capture).*.resx, $(capture).designer.cs, $(capture).designer.vb",\n    "*.tex": "$(capture).acn, $(capture).acr, $(capture).alg, $(capture).aux, $(capture).bbl, $(capture).blg, $(capture).fdb_latexmk, $(capture).fls, $(capture).glg, $(capture).glo, $(capture).gls, $(capture).idx, $(capture).ind, $(capture).ist, $(capture).lof, $(capture).log, $(capture).lot, $(capture).out, $(capture).pdf, $(capture).synctex.gz, $(capture).toc, $(capture).xdv",\n    "*.ts": "$(capture).js, $(capture).d.ts.map, $(capture).*.ts, $(capture)_*.js, $(capture)_*.ts",\n    "*.tsx": "$(capture).ts, $(capture).*.tsx, $(capture)_*.ts, $(capture)_*.tsx",\n    "*.vbproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",\n    "*.vue": "$(capture).*.ts, $(capture).*.js, $(capture).story.vue",\n    "*.xaml": "$(capture).xaml.cs",\n    "+layout.svelte": "+layout.ts,+layout.ts,+layout.js,+layout.server.ts,+layout.server.js,+layout.gql",\n    "+page.svelte": "+page.server.ts,+page.server.js,+page.ts,+page.js,+page.gql",\n    ".clang-tidy": ".clang-format, .clangd, compile_commands.json",\n    ".env": "*.env, .env.*, .envrc, env.d.ts",\n    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",\n    ".project": ".classpath",\n    "//": "Last update at 4/29/2023, 2:04:58 PM",\n    "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",\n    "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json",\n    "I*.cs": "$(capture).cs",\n    "artisan": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, server.php, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, webpack.mix.js, windi.config.*",\n    "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",\n    "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",\n    "default.nix": "shell.nix",\n    "deno.json*": "*.env, .env.*, .envrc, api-extractor.json, deno.lock, env.d.ts, import-map.json, import_map.json, jsconfig.*, tsconfig.*, tsdoc.*",\n    "dockerfile": ".dockerignore, docker-compose.*, dockerfile*",\n    "flake.nix": "flake.lock",\n    "gatsby-config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, gatsby-browser.*, gatsby-node.*, gatsby-ssr.*, gatsby-transformer.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "gemfile": ".ruby-version, gemfile.lock",\n    "go.mod": ".air*, go.sum",\n    "go.work": "go.work.sum",\n    "mix.exs": ".credo.exs, .dialyzer_ignore.exs, .formatter.exs, .iex.exs, .tool-versions, mix.lock",\n    "next.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, next-env.d.ts, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "package.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json, eslint*, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, simple-git-hooks*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",\n    "pubspec.yaml": ".metadata, .packages, all_lint_rules.yaml, analysis_options.yaml, build.yaml, pubspec.lock, pubspec_overrides.yaml",\n    "pyproject.toml": ".pdm.toml, pdm.lock, pyproject.toml",\n    "quasar.conf.js": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, quasar.extensions.json, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "readme*": "authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors*",\n    "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "rush.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json, eslint*, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, simple-git-hooks*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",\n    "shims.d.ts": "*.d.ts",\n    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, houdini.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vite.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",\n    "electron.vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*,electron.vite.config.*.mjs",\n    "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*"\n  },\n  "vsicons.associations.files": [\n    {\n      "icon": "rollup",\n      "extensions": [\n        "rollup.config.build.mjs"\n      ],\n      "filename": true\n    },\n    {\n      "icon": "rollup",\n      "extensions": [\n        "rollup.config.*.mjs"\n      ],\n      "filename": true\n    }\n  ],\n  // tailwind css\n  "editor.quickSuggestions": {\n    "strings": "on"\n  },\n  // ========== vetur (vue2 only) ==========\n  "vetur.experimental.templateInterpolationService": false,\n  "vetur.validation.template": false,\n  "vetur.validation.script": false,\n  "tabnine.experimentalAutoImports": true,\n  "workbench.editorAssociations": {\n    "*.xls": "default"\n  },\n  "remote.extensionKind": {\n    "GitHub.copilot": [\n      "ui"\n    ],\n    "github.copilot-chat": [\n      "ui"\n    ]\n  },\n  // markdown-pdf\n  "markdown-pdf.displayHeaderFooter": false,\n  "markdown-pdf.outputDirectory": "./pdf",\n  "markdown-pdf.outputDirectoryRelativePathFile": true,\n  "makefile.configureOnOpen": false,\n  "database-client.autoSync": true,\n  "remote.SSH.remotePlatform": {\n    "\u9c7c\u7384\u673a": "linux"\n  },\n  "gitlens.views.scm.grouped.views": {\n    "commits": false,\n    "branches": false,\n    "remotes": false,\n    "stashes": false,\n    "tags": false,\n    "worktrees": false,\n    "contributors": false,\n    "repositories": false,\n    "searchAndCompare": false,\n    "launchpad": false\n  }\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(g,{...n})}):g(n)}},2790:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>i});var t=o(758);const c={},r=t.createContext(c);function s(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);