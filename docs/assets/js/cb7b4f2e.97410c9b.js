"use strict";(self.webpackChunkzhuddan_github_io=self.webpackChunkzhuddan_github_io||[]).push([[1266],{6562:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"js/js-libs/cesium/weather-effect","title":"\u5929\u6c14\u7279\u6548","description":"\u57fa\u7840\u7279\u6548","source":"@site/archived/js/js-libs/cesium/weather-effect.md","sourceDirName":"js/js-libs/cesium","slug":"/js/js-libs/cesium/weather-effect","permalink":"/docs/js/js-libs/cesium/weather-effect","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"cesium","permalink":"/docs/tags/cesium"}],"version":"current","frontMatter":{"tags":["cesium"]},"sidebar":"archived","previous":{"title":"cesium","permalink":"/docs/category/cesium"},"next":{"title":"js\u6a21\u5757\u8bf4\u660e","permalink":"/docs/js/modules"}}');var i=n(6070),o=n(2790);const s={tags:["cesium"]},a="\u5929\u6c14\u7279\u6548",c={},l=[];function f(e){const r={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"\u5929\u6c14\u7279\u6548",children:"\u5929\u6c14\u7279\u6548"})}),"\n",(0,i.jsx)(r.p,{children:"\u57fa\u7840\u7279\u6548"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"\u57fa\u7840\u7279\u6548\u62bd\u8c61\u7c7b(BaseEffect.ts)"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"import type { PostProcessStage, Viewer } from 'cesium'\r\nimport { Cartesian3 } from 'cesium'\r\nconst VISIBLE_DISTANCE = 80000\r\nexport abstract class BaseEffect {\r\n  position: number[]\r\n  viewer: Viewer\r\n  effect: Nullable<PostProcessStage> = null\r\n  _visible = true\r\n  isDestroyed = false\r\n  isAdd = false\r\n  constructor(viewer: Viewer, position: number[]) {\r\n    this.position = position\r\n    this.viewer = viewer\r\n    this.update()\r\n  }\r\n\r\n  get visible() {\r\n    return this._visible\r\n  }\r\n\r\n  set visible(_visible) {\r\n    this._visible = _visible\r\n    if (this.effect) {\r\n      this.effect.enabled = _visible\r\n      if (_visible && !this.isAdd) {\r\n        this.isAdd = true\r\n        this.viewer.postProcessStages.add(this.effect)\r\n      }\r\n    }\r\n  }\r\n  abstract init(): void\r\n  // \u7279\u6548\r\n  abstract createEffect(): PostProcessStage\r\n  abstract createFragmentShader(): string\r\n\r\n  update() {\r\n    if (this.isDestroyed)\r\n      return\r\n    const position = Cartesian3.fromDegrees(this.position[0], this.position[1])\r\n    const distance = Cartesian3.distance(this.viewer.scene.camera.position, position)\r\n    requestAnimationFrame(() => {\r\n      this.update()\r\n    })\r\n    this.visible = distance <= VISIBLE_DISTANCE\r\n  }\r\n\r\n  destroy() {\r\n    if (!this.viewer || !this.effect)\r\n      return\r\n    this.viewer.scene.postProcessStages.remove(this.effect)\r\n    this.isDestroyed = true\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsx)(r.li,{children:"\u96e8(RainEffect.ts)"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\r\nimport { createUuid } from '@/utils'\r\nimport { defaultValue, PostProcessStage } from 'cesium'\r\nimport { BaseEffect } from './BaseEffect'\r\ninterface RainEffectOption {\r\n  tiltAngle: number\r\n  rainSize: number\r\n  rainSpeed: number\r\n}\r\nexport class RainEffect extends BaseEffect {\r\n  tiltAngle: any\r\n  rainSpeed: any\r\n  rainSize: any\r\n  constructor(\r\n    viewer: Viewer,\r\n    position: number[],\r\n    options: RainEffectOption = { tiltAngle: -0.6, rainSize: 0.3, rainSpeed: 60.0 },\r\n  ) {\r\n    super(viewer, position)\r\n    this.tiltAngle = defaultValue(options.tiltAngle, -0.6)\r\n    this.rainSize = defaultValue(options.rainSize, 0.3)\r\n    this.rainSpeed = defaultValue(options.rainSpeed, 60.0)\r\n    this.init()\r\n  }\r\n\r\n  init() {\r\n    this.effect = this.createEffect()\r\n  }\r\n\r\n  createEffect(): PostProcessStage {\r\n    return new PostProcessStage({\r\n      name: createUuid(),\r\n      fragmentShader: this.createFragmentShader(),\r\n      uniforms: {\r\n        tiltAngle: () => {\r\n          return this.tiltAngle\r\n        },\r\n        rainSize: () => {\r\n          return this.rainSize\r\n        },\r\n        rainSpeed: () => {\r\n          return this.rainSpeed\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  createFragmentShader() {\r\n    return `uniform sampler2D colorTexture;\r\n          varying vec2 v_textureCoordinates;\r\n          uniform float tiltAngle;\r\n          uniform float rainSize;\r\n          uniform float rainSpeed;\r\n          float hash(float x) {\r\n              return fract(sin(x * 133.3) * 13.13);\r\n          }\r\n          void main(void) {\r\n              float time = czm_frameNumber / rainSpeed;\r\n              vec2 resolution = czm_viewport.zw;\r\n              vec2 uv = (gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);\r\n              vec3 c = vec3(.6, .7, .8);\r\n              float a = tiltAngle;\r\n              float si = sin(a), co = cos(a);\r\n              uv *= mat2(co, -si, si, co);\r\n              uv *= length(uv + vec2(0, 4.9)) * rainSize + 1.;\r\n              float v = 1. - sin(hash(floor(uv.x * 100.)) * 2.);\r\n              float b = clamp(abs(sin(20. * time * v + uv.y * (5. / (2. + v)))) - .95, 0., 1.) * 20.;\r\n              c *= v * b;\r\n              gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), vec4(c, 1), .5);\r\n          }\r\n          `\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"3",children:["\n",(0,i.jsx)(r.li,{children:"\u96ea(SnowEffect.ts)"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\r\nimport { createUuid } from '@/utils'\r\n\r\nimport { defaultValue, PostProcessStage } from 'cesium'\r\n\r\nimport { BaseEffect } from './BaseEffect'\r\n\r\ninterface SnowEffectOptions {\r\n  snowSize: number\r\n  snowSpeed: number\r\n}\r\nexport class SnowEffect extends BaseEffect {\r\n  snowSize: 0.02\r\n  snowSpeed: 60.0\r\n  constructor(\r\n    viewer: Viewer,\r\n    position: number[],\r\n    options: SnowEffectOptions = { snowSize: 0.02, snowSpeed: 60.0 },\r\n  ) {\r\n    super(viewer, position)\r\n    this.snowSize = defaultValue(options.snowSize, 0.02) // \u6700\u597d\u5c0f\u4e8e0.02\r\n    this.snowSpeed = defaultValue(options.snowSpeed, 60.0)\r\n    this.init()\r\n  }\r\n\r\n  init() {\r\n    this.effect = this.createEffect()\r\n  }\r\n\r\n  createEffect(): PostProcessStage {\r\n    return new PostProcessStage({\r\n      name: createUuid(),\r\n      fragmentShader: this.createFragmentShader(),\r\n      uniforms: {\r\n        snowSize: () => {\r\n          return this.snowSize\r\n        },\r\n        snowSpeed: () => {\r\n          return this.snowSpeed\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  createFragmentShader() {\r\n    return `uniform sampler2D colorTexture;\r\n          varying vec2 v_textureCoordinates;\r\n          uniform float snowSpeed;\r\n          uniform float snowSize;\r\n          float snow(vec2 uv,float scale)\r\n          {\r\n              float time=czm_frameNumber/snowSpeed;\r\n              float w=smoothstep(1.,0.,-uv.y*(scale/10.));if(w<.1)return 0.;\r\n              uv+=time/scale;uv.y+=time*2./scale;uv.x+=sin(uv.y+time*.5)/scale;\r\n              uv*=scale;vec2 s=floor(uv),f=fract(uv),p;float k=3.,d;\r\n              p=.5+.35*sin(11.*fract(sin((s+p+scale)*mat2(7,3,6,5))*5.))-f;d=length(p);k=min(d,k);\r\n              k=smoothstep(0.,k,sin(f.x+f.y)*snowSize);\r\n              return k*w;\r\n          }\r\n          void main(void){\r\n              vec2 resolution=czm_viewport.zw;\r\n              vec2 uv=(gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x,resolution.y);\r\n              vec3 finalColor=vec3(0);\r\n              //float c=smoothstep(1.,0.3,clamp(uv.y*.3+.8,0.,.75));\r\n              float c=0.;\r\n              c+=snow(uv,30.)*.0;\r\n              c+=snow(uv,20.)*.0;\r\n              c+=snow(uv,15.)*.0;\r\n              c+=snow(uv,10.);\r\n              c+=snow(uv,8.);\r\n              c+=snow(uv,6.);\r\n              c+=snow(uv,5.);\r\n              finalColor=(vec3(c));\r\n              gl_FragColor=mix(texture2D(colorTexture,v_textureCoordinates),vec4(finalColor,1),.5);\r\n              }\r\n              `\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"4",children:["\n",(0,i.jsx)(r.li,{children:"\u96fe(FogEffect.ts)"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\r\nimport { createUuid } from '@/utils'\r\n\r\nimport { Color, defaultValue, PostProcessStage } from 'cesium'\r\n\r\nimport { BaseEffect } from './BaseEffect'\r\ninterface RainEffectOption {\r\n  visibility: number\r\n  color: Color\r\n}\r\nexport class FogEffect extends BaseEffect {\r\n  visibility: any\r\n  color: any\r\n  rainSize: any\r\n  constructor(\r\n    viewer: Viewer,\r\n    position: number[],\r\n    options: RainEffectOption = { visibility: 0.2, color: new Color(0.8, 0.8, 0.8, 0.5) },\r\n  ) {\r\n    super(viewer, position)\r\n    this.visibility = defaultValue(options.visibility, 0.2)\r\n    this.color = defaultValue(options.color, new Color(0.8, 0.8, 0.8, 0.5))\r\n    this.init()\r\n  }\r\n\r\n  init() {\r\n    this.effect = this.createEffect()\r\n  }\r\n\r\n  createEffect(): PostProcessStage {\r\n    return new PostProcessStage({\r\n      name: createUuid(),\r\n      fragmentShader: this.createFragmentShader(),\r\n      uniforms: {\r\n        visibility: () => {\r\n          return this.visibility\r\n        },\r\n        fogColor: () => {\r\n          return this.color\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  createFragmentShader() {\r\n    return `uniform sampler2D colorTexture;\r\n    uniform sampler2D depthTexture;\r\n    uniform float visibility;\r\n    uniform vec4 fogColor;\r\n    varying vec2 v_textureCoordinates;\r\n    void main(void)\r\n    {\r\n       vec4 origcolor = texture2D(colorTexture, v_textureCoordinates);\r\n       float depth = czm_readDepth(depthTexture, v_textureCoordinates);\r\n       vec4 depthcolor = texture2D(depthTexture, v_textureCoordinates);\r\n       float f = visibility * (depthcolor.r - 0.3) / 0.2;\r\n       if (f < 0.0) f = 0.0;\r\n       else if (f > 1.0) f = 1.0;\r\n       gl_FragColor = mix(origcolor, fogColor, f);\r\n    }`\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:"\u5929\u6c14\u63a7\u5236\u7c7b WeatherControl.ts"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"import type { WeatherType } from '@/api/model/stationModel'\r\nimport type Viewer from 'cesium/Source/Widgets/Viewer/Viewer'\r\nimport type { BaseEffect } from './effect'\r\nimport { FogEffect, RainEffect, SnowEffect } from './effect'\r\n\r\nexport class WeatherControl {\r\n  position: number[]\r\n  _weather: WeatherType = 'sun'\r\n  weatherEffect: Nullable<BaseEffect> = null\r\n  viewer: Viewer\r\n  isDestroyed = false\r\n  constructor(viewer: Viewer, position: number[], weather: WeatherType = 'sun') {\r\n    this.viewer = viewer\r\n    this.position = position\r\n    this.weather = weather\r\n  }\r\n\r\n  get weather() {\r\n    return this._weather\r\n  }\r\n\r\n  set weather(weather: WeatherType) {\r\n    if (this._weather === weather)\r\n      return\r\n    this._weather = weather\r\n    this.handleWeather()\r\n  }\r\n\r\n  handleWeather() {\r\n    this.weatherEffect?.destroy()\r\n    this.weatherEffect = null\r\n    if (this.isDestroyed)\r\n      return\r\n    if (this.weather === 'rain') {\r\n      this.weatherEffect = new RainEffect(this.viewer, this.position)\r\n      return\r\n    }\r\n    if (this.weather === 'snow') {\r\n      this.weatherEffect = new SnowEffect(this.viewer, this.position)\r\n      return\r\n    }\r\n    if (this.weather === 'fog') {\r\n      this.weatherEffect = new FogEffect(this.viewer, this.position)\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.weatherEffect)\r\n      this.weatherEffect.destroy()\r\n    this.isDestroyed = true\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:"useWeatherControl.ts"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\r\nimport { useStationStore } from '@/store/modules/station'\r\nimport { WeatherControl } from './WeatherControl'\r\n\r\nexport function useWeatherControl(viewer: Viewer) {\r\n  const stationStore = useStationStore()\r\n  const weatherEffect = computed(() => stationStore.weatherEffect)\r\n  const stationCountry = computed(() => stationStore.stationCountry)\r\n  const stationWeatherControl: Record<string, WeatherControl> = {}\r\n  function update() {\r\n    if (!weatherEffect.value) {\r\n      Object.keys(stationWeatherControl).map(e => stationWeatherControl[e].destroy())\r\n      return\r\n    }\r\n    for (let index = 0; index < stationCountry.value.length; index++) {\r\n      const { stationCode, active, stationLon, stationLat, weather } = stationCountry.value[index]\r\n      if (active) {\r\n        if (!stationWeatherControl[stationCode] || stationWeatherControl[stationCode].isDestroyed)\r\n          stationWeatherControl[stationCode] = new WeatherControl(viewer, [stationLon, stationLat])\r\n        stationWeatherControl[stationCode].weather = weather || 'sun'\r\n      }\r\n      else {\r\n        if (stationWeatherControl[stationCode])\r\n          stationWeatherControl[stationCode].destroy()\r\n      }\r\n    }\r\n  }\r\n  watch([stationCountry, weatherEffect], update, { immediate: true, deep: true })\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},2790:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(758);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);