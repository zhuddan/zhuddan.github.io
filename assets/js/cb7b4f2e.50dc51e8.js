"use strict";(self.webpackChunkzhuddan_github_io=self.webpackChunkzhuddan_github_io||[]).push([[1266],{2097:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"js/js-libs/cesium/weather-effect","title":"\u5929\u6c14\u7279\u6548","description":"\u57fa\u7840\u7279\u6548","source":"@site/archived/js/js-libs/cesium/weather-effect.md","sourceDirName":"js/js-libs/cesium","slug":"/js/js-libs/cesium/weather-effect","permalink":"/docs/js/js-libs/cesium/weather-effect","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"cesium","permalink":"/docs/tags/cesium"}],"version":"current","frontMatter":{"tags":["cesium"]},"sidebar":"archived","previous":{"title":"cesium","permalink":"/docs/category/cesium"},"next":{"title":"js\u6a21\u5757\u8bf4\u660e","permalink":"/docs/js/modules"}}');var r=t(6070),o=t(7252);const s={tags:["cesium"]},a="\u5929\u6c14\u7279\u6548",c={},l=[];function f(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\u5929\u6c14\u7279\u6548",children:"\u5929\u6c14\u7279\u6548"})}),"\n",(0,r.jsx)(n.p,{children:"\u57fa\u7840\u7279\u6548"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u57fa\u7840\u7279\u6548\u62bd\u8c61\u7c7b(BaseEffect.ts)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { PostProcessStage, Viewer } from 'cesium'\nimport { Cartesian3 } from 'cesium'\nconst VISIBLE_DISTANCE = 80000\nexport abstract class BaseEffect {\n  position: number[]\n  viewer: Viewer\n  effect: Nullable<PostProcessStage> = null\n  _visible = true\n  isDestroyed = false\n  isAdd = false\n  constructor(viewer: Viewer, position: number[]) {\n    this.position = position\n    this.viewer = viewer\n    this.update()\n  }\n\n  get visible() {\n    return this._visible\n  }\n\n  set visible(_visible) {\n    this._visible = _visible\n    if (this.effect) {\n      this.effect.enabled = _visible\n      if (_visible && !this.isAdd) {\n        this.isAdd = true\n        this.viewer.postProcessStages.add(this.effect)\n      }\n    }\n  }\n  abstract init(): void\n  // \u7279\u6548\n  abstract createEffect(): PostProcessStage\n  abstract createFragmentShader(): string\n\n  update() {\n    if (this.isDestroyed)\n      return\n    const position = Cartesian3.fromDegrees(this.position[0], this.position[1])\n    const distance = Cartesian3.distance(this.viewer.scene.camera.position, position)\n    requestAnimationFrame(() => {\n      this.update()\n    })\n    this.visible = distance <= VISIBLE_DISTANCE\n  }\n\n  destroy() {\n    if (!this.viewer || !this.effect)\n      return\n    this.viewer.scene.postProcessStages.remove(this.effect)\n    this.isDestroyed = true\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"\u96e8(RainEffect.ts)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\nimport { createUuid } from '@/utils'\nimport { defaultValue, PostProcessStage } from 'cesium'\nimport { BaseEffect } from './BaseEffect'\ninterface RainEffectOption {\n  tiltAngle: number\n  rainSize: number\n  rainSpeed: number\n}\nexport class RainEffect extends BaseEffect {\n  tiltAngle: any\n  rainSpeed: any\n  rainSize: any\n  constructor(\n    viewer: Viewer,\n    position: number[],\n    options: RainEffectOption = { tiltAngle: -0.6, rainSize: 0.3, rainSpeed: 60.0 },\n  ) {\n    super(viewer, position)\n    this.tiltAngle = defaultValue(options.tiltAngle, -0.6)\n    this.rainSize = defaultValue(options.rainSize, 0.3)\n    this.rainSpeed = defaultValue(options.rainSpeed, 60.0)\n    this.init()\n  }\n\n  init() {\n    this.effect = this.createEffect()\n  }\n\n  createEffect(): PostProcessStage {\n    return new PostProcessStage({\n      name: createUuid(),\n      fragmentShader: this.createFragmentShader(),\n      uniforms: {\n        tiltAngle: () => {\n          return this.tiltAngle\n        },\n        rainSize: () => {\n          return this.rainSize\n        },\n        rainSpeed: () => {\n          return this.rainSpeed\n        },\n      },\n    })\n  }\n\n  createFragmentShader() {\n    return `uniform sampler2D colorTexture;\n          varying vec2 v_textureCoordinates;\n          uniform float tiltAngle;\n          uniform float rainSize;\n          uniform float rainSpeed;\n          float hash(float x) {\n              return fract(sin(x * 133.3) * 13.13);\n          }\n          void main(void) {\n              float time = czm_frameNumber / rainSpeed;\n              vec2 resolution = czm_viewport.zw;\n              vec2 uv = (gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);\n              vec3 c = vec3(.6, .7, .8);\n              float a = tiltAngle;\n              float si = sin(a), co = cos(a);\n              uv *= mat2(co, -si, si, co);\n              uv *= length(uv + vec2(0, 4.9)) * rainSize + 1.;\n              float v = 1. - sin(hash(floor(uv.x * 100.)) * 2.);\n              float b = clamp(abs(sin(20. * time * v + uv.y * (5. / (2. + v)))) - .95, 0., 1.) * 20.;\n              c *= v * b;\n              gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), vec4(c, 1), .5);\n          }\n          `\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"\u96ea(SnowEffect.ts)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\nimport { createUuid } from '@/utils'\n\nimport { defaultValue, PostProcessStage } from 'cesium'\n\nimport { BaseEffect } from './BaseEffect'\n\ninterface SnowEffectOptions {\n  snowSize: number\n  snowSpeed: number\n}\nexport class SnowEffect extends BaseEffect {\n  snowSize: 0.02\n  snowSpeed: 60.0\n  constructor(\n    viewer: Viewer,\n    position: number[],\n    options: SnowEffectOptions = { snowSize: 0.02, snowSpeed: 60.0 },\n  ) {\n    super(viewer, position)\n    this.snowSize = defaultValue(options.snowSize, 0.02) // \u6700\u597d\u5c0f\u4e8e0.02\n    this.snowSpeed = defaultValue(options.snowSpeed, 60.0)\n    this.init()\n  }\n\n  init() {\n    this.effect = this.createEffect()\n  }\n\n  createEffect(): PostProcessStage {\n    return new PostProcessStage({\n      name: createUuid(),\n      fragmentShader: this.createFragmentShader(),\n      uniforms: {\n        snowSize: () => {\n          return this.snowSize\n        },\n        snowSpeed: () => {\n          return this.snowSpeed\n        },\n      },\n    })\n  }\n\n  createFragmentShader() {\n    return `uniform sampler2D colorTexture;\n          varying vec2 v_textureCoordinates;\n          uniform float snowSpeed;\n          uniform float snowSize;\n          float snow(vec2 uv,float scale)\n          {\n              float time=czm_frameNumber/snowSpeed;\n              float w=smoothstep(1.,0.,-uv.y*(scale/10.));if(w<.1)return 0.;\n              uv+=time/scale;uv.y+=time*2./scale;uv.x+=sin(uv.y+time*.5)/scale;\n              uv*=scale;vec2 s=floor(uv),f=fract(uv),p;float k=3.,d;\n              p=.5+.35*sin(11.*fract(sin((s+p+scale)*mat2(7,3,6,5))*5.))-f;d=length(p);k=min(d,k);\n              k=smoothstep(0.,k,sin(f.x+f.y)*snowSize);\n              return k*w;\n          }\n          void main(void){\n              vec2 resolution=czm_viewport.zw;\n              vec2 uv=(gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x,resolution.y);\n              vec3 finalColor=vec3(0);\n              //float c=smoothstep(1.,0.3,clamp(uv.y*.3+.8,0.,.75));\n              float c=0.;\n              c+=snow(uv,30.)*.0;\n              c+=snow(uv,20.)*.0;\n              c+=snow(uv,15.)*.0;\n              c+=snow(uv,10.);\n              c+=snow(uv,8.);\n              c+=snow(uv,6.);\n              c+=snow(uv,5.);\n              finalColor=(vec3(c));\n              gl_FragColor=mix(texture2D(colorTexture,v_textureCoordinates),vec4(finalColor,1),.5);\n              }\n              `\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"\u96fe(FogEffect.ts)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\nimport { createUuid } from '@/utils'\n\nimport { Color, defaultValue, PostProcessStage } from 'cesium'\n\nimport { BaseEffect } from './BaseEffect'\ninterface RainEffectOption {\n  visibility: number\n  color: Color\n}\nexport class FogEffect extends BaseEffect {\n  visibility: any\n  color: any\n  rainSize: any\n  constructor(\n    viewer: Viewer,\n    position: number[],\n    options: RainEffectOption = { visibility: 0.2, color: new Color(0.8, 0.8, 0.8, 0.5) },\n  ) {\n    super(viewer, position)\n    this.visibility = defaultValue(options.visibility, 0.2)\n    this.color = defaultValue(options.color, new Color(0.8, 0.8, 0.8, 0.5))\n    this.init()\n  }\n\n  init() {\n    this.effect = this.createEffect()\n  }\n\n  createEffect(): PostProcessStage {\n    return new PostProcessStage({\n      name: createUuid(),\n      fragmentShader: this.createFragmentShader(),\n      uniforms: {\n        visibility: () => {\n          return this.visibility\n        },\n        fogColor: () => {\n          return this.color\n        },\n      },\n    })\n  }\n\n  createFragmentShader() {\n    return `uniform sampler2D colorTexture;\n    uniform sampler2D depthTexture;\n    uniform float visibility;\n    uniform vec4 fogColor;\n    varying vec2 v_textureCoordinates;\n    void main(void)\n    {\n       vec4 origcolor = texture2D(colorTexture, v_textureCoordinates);\n       float depth = czm_readDepth(depthTexture, v_textureCoordinates);\n       vec4 depthcolor = texture2D(depthTexture, v_textureCoordinates);\n       float f = visibility * (depthcolor.r - 0.3) / 0.2;\n       if (f < 0.0) f = 0.0;\n       else if (f > 1.0) f = 1.0;\n       gl_FragColor = mix(origcolor, fogColor, f);\n    }`\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5929\u6c14\u63a7\u5236\u7c7b WeatherControl.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { WeatherType } from '@/api/model/stationModel'\nimport type Viewer from 'cesium/Source/Widgets/Viewer/Viewer'\nimport type { BaseEffect } from './effect'\nimport { FogEffect, RainEffect, SnowEffect } from './effect'\n\nexport class WeatherControl {\n  position: number[]\n  _weather: WeatherType = 'sun'\n  weatherEffect: Nullable<BaseEffect> = null\n  viewer: Viewer\n  isDestroyed = false\n  constructor(viewer: Viewer, position: number[], weather: WeatherType = 'sun') {\n    this.viewer = viewer\n    this.position = position\n    this.weather = weather\n  }\n\n  get weather() {\n    return this._weather\n  }\n\n  set weather(weather: WeatherType) {\n    if (this._weather === weather)\n      return\n    this._weather = weather\n    this.handleWeather()\n  }\n\n  handleWeather() {\n    this.weatherEffect?.destroy()\n    this.weatherEffect = null\n    if (this.isDestroyed)\n      return\n    if (this.weather === 'rain') {\n      this.weatherEffect = new RainEffect(this.viewer, this.position)\n      return\n    }\n    if (this.weather === 'snow') {\n      this.weatherEffect = new SnowEffect(this.viewer, this.position)\n      return\n    }\n    if (this.weather === 'fog') {\n      this.weatherEffect = new FogEffect(this.viewer, this.position)\n    }\n  }\n\n  destroy() {\n    if (this.weatherEffect)\n      this.weatherEffect.destroy()\n    this.isDestroyed = true\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"useWeatherControl.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { Viewer } from 'cesium'\nimport { useStationStore } from '@/store/modules/station'\nimport { WeatherControl } from './WeatherControl'\n\nexport function useWeatherControl(viewer: Viewer) {\n  const stationStore = useStationStore()\n  const weatherEffect = computed(() => stationStore.weatherEffect)\n  const stationCountry = computed(() => stationStore.stationCountry)\n  const stationWeatherControl: Record<string, WeatherControl> = {}\n  function update() {\n    if (!weatherEffect.value) {\n      Object.keys(stationWeatherControl).map(e => stationWeatherControl[e].destroy())\n      return\n    }\n    for (let index = 0; index < stationCountry.value.length; index++) {\n      const { stationCode, active, stationLon, stationLat, weather } = stationCountry.value[index]\n      if (active) {\n        if (!stationWeatherControl[stationCode] || stationWeatherControl[stationCode].isDestroyed)\n          stationWeatherControl[stationCode] = new WeatherControl(viewer, [stationLon, stationLat])\n        stationWeatherControl[stationCode].weather = weather || 'sun'\n      }\n      else {\n        if (stationWeatherControl[stationCode])\n          stationWeatherControl[stationCode].destroy()\n      }\n    }\n  }\n  watch([stationCountry, weatherEffect], update, { immediate: true, deep: true })\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},7252:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(758);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);